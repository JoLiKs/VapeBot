import asyncio
import random
import time

import emoji
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart

from aiogram.utils.exceptions import BotBlocked

from data.config import ADMINS_ID, OFFICERS
from handlers.admin.mail import send_help_message
from handlers.users.keyboards import user_btns, admin_btns
from states import Name, Admin
from loader import dp, bot
from utils.datbase import set_officerDB, db_check, getNameById, getIdByName, del_officerDB, get_users
from utils.schemas import User
from utils.sql_commands import register_user, register_ban_user

APROOVS = []
JOINS = []
BANS = {}
kb_info = InlineKeyboardMarkup(row_width=1)
kb_info.add(types.InlineKeyboardButton(
    text=emoji.emojize(':thought_balloon:') + " Kritos vape " + emoji.emojize(':dashing_away:'),
    url="https://t.me/+63FMRH_Xa8xkOTMy")
)
kb_info.add(types.InlineKeyboardButton(
    text=emoji.emojize(':speech_balloon:') + " –ù–∞—à —á–∞—Ç " + emoji.emojize(':speech_balloon:'),
    url="https://t.me/+xuvJD7adiu4zNDcy")
)

kb_sorts = InlineKeyboardMarkup(row_width=1)
kb_sorts.add(types.InlineKeyboardButton(
    text=emoji.emojize(':red_paper_lantern:') + " –ò—Å–ø–∞—Ä–∏—Ç–µ–ª–∏",
    callback_data=f"evaporators~")
)
# kb_sorts.add(types.InlineKeyboardButton(
#   text="–ö–∞–ª—å—è–Ω–Ω–æ–µ",
#  callback_data=f"hookahs~")
# )
# kb_sorts.add(types.InlineKeyboardButton(
#       text="–î—Ä—É–≥–æ–µ",
#      callback_data=f"other~")
# )
user_btns = types.ReplyKeyboardMarkup(keyboard=user_btns, resize_keyboard=True)

price_list = [
    {
        "text": "Pasito 2 (3—à—Ç)",
        "price": 400
    },
    {
        "text": "SANTY, –ß–ê–†–û–ù+ (3—à—Ç)",
        "price": 300
    },
    {
        "text": "Boost Mesh (5 —à—Ç )-–≤ —É–ø–∞–∫, -0,4-0,6ohm",
        "price": 350
    },
    {
        "text": "Voopoo PNP 5—à—Ç 0.2 0.6",
        "price": 300
    },
    {
        "text": "Jellybox Nano (3—à—Ç)",
        "price": 300
    }

]


async def kbs(text, message):
    userId = message.from_user.id
    if userId in ADMINS_ID:
        await message.answer(text, reply_markup=admin_btns)
        return
    await message.answer(text, reply_markup=user_btns)


@dp.callback_query_handler(lambda call: call.data.startswith('evaporators'))
async def evaporators(call: types.CallbackQuery):
    kb_evaporators = InlineKeyboardMarkup(row_width=1)
    for eva in price_list:
        random_id = random.randint(1, 1000)
        kb_evaporators.add(
            types.InlineKeyboardButton(text=f'{eva["text"]}', callback_data=f"eva~{random_id}~{eva['price']}"))
    await call.message.answer(emoji.emojize(':red_paper_lantern:') + " –ò—Å–ø–∞—Ä–∏—Ç–µ–ª–∏:", reply_markup=kb_evaporators)


@dp.callback_query_handler(lambda call: call.data.startswith('eva'))
async def eva_pricer(call: types.CallbackQuery):
    price = call.data.split("~")[2]
    await call.message.answer(f"–¶–µ–Ω–∞ –∑–∞ 1 —à—Ç. - {price}—Ä")


@dp.callback_query_handler(lambda call: call.data.startswith('other'))
async def other(call: types.CallbackQuery):
    await call.message.answer("–î—Ä—É–≥–æ–µ")


@dp.callback_query_handler(lambda call: call.data.startswith('accept'))
async def accepting(call: types.CallbackQuery):
    userId = call.data.split("~")[1]
    name = call.data.split("~")[2]
    APROOVS.append(int(userId))
    register_user(int(userId), name, 'user')
    await bot.send_message(userId, "–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!\n–ù–∞–ø–∏—à–∏—Ç–µ /start / Your request was accepted!\nWrite /start",
                           reply_markup=user_btns)
    await call.message.reply("–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç")


@dp.callback_query_handler(lambda call: call.data.startswith('ban'))
async def accept_ban(call: types.CallbackQuery):
    userId = int(call.data.split("~")[1])
    name = call.data.split("~")[2]
    register_ban_user(userId)
    await bot.send_message(userId, "–í–∞–º –¥–∞–ª–∏ –±–∞–Ω / you has been banned")
    await call.message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω")


@dp.message_handler(text='üíé –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç üíé')
async def sorts(message: types.Message):
    await message.answer(emoji.emojize(":sparkles:") + " –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=kb_sorts)


@dp.message_handler(text='üìò –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def sorts(message: types.Message):
    await message.answer(emoji.emojize(":sparkles:") + " –í—Å—é –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã\n—Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ",
                         reply_markup=kb_info)

@dp.message_handler(commands=['unban'])
async def handle_ban_command(msg: types.Message):
    if msg.from_user.id in OFFICERS:
        if not msg.get_args():
            return await msg.reply("–ü—Ä–∏–º–µ—Ä: /unban –∏–º—è")
        try:
            username = msg.get_args()
        except (ValueError, TypeError):
            return await msg.reply("–£–∫–∞–∂–∏ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è / write username")
        abuser_id = getIdByName(username)
        if abuser_id == 0:
            return await msg.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω / User not found")
        BANS.pop(abuser_id)
        await bot.send_message(abuser_id, f"–í–∞—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ / you has been unbanned",
                               reply_markup=types.ReplyKeyboardRemove())
        await msg.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")


@dp.message_handler(commands=['ban'])
async def handle_ban_command(msg: types.Message):
    if msg.from_user.id in OFFICERS:
        if "—á" not in msg.get_args():
            return await msg.reply("–ü—Ä–∏–º–µ—Ä: /ban 1—á –∏–º—è")
        try:
            data = msg.get_args().split("—á ")
            username = data[1]
            ban_time = int(data[0])
            if ban_time < 1:
                return await msg.reply("–£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –±–æ–ª–µ–µ —á–∞—Å–æ–≤")
        except (ValueError, TypeError):
            return await msg.reply("–£–∫–∞–∂–∏ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è / write username")
        abuser_id = getIdByName(username)
        if abuser_id == 0:
            return await msg.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω / User not found")
        # if abuser_id in ADMINS_ID:
        # return await msg.reply("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å! / Administrator can't be banned!")
        BANS[abuser_id] = {"perf": time.perf_counter(), "ban_time": ban_time*3600}
        register_ban_user(abuser_id)
        await bot.send_message(abuser_id, f"–í–∞–º –¥–∞–ª–∏ –±–∞–Ω / you has been banned",
                               reply_markup=types.ReplyKeyboardRemove())
        await msg.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")


@dp.message_handler(CommandStart(), state='*')
async def start_bot(message: types.Message, state: FSMContext):
    if message.from_user.id in BANS:
        ban_time = int(BANS[message.from_user.id]['ban_time'])-(int(time.perf_counter()) - int(BANS[message.from_user.id]['perf']))
        if ban_time <= 0:
            BANS.pop(message.from_user.id)
            await message.answer("–ë–∞–Ω —Å–Ω—è—Ç!")
            await message.answer(
                emoji.emojize(":high_voltage:"),
                reply_markup=user_btns)
            return
        hours: int = 0
        minutes: int = 0
        if ban_time / 3600 > 1:
            hours = int(ban_time / 3600)
        if ban_time / 60 > 1 > hours:
            minutes = int(ban_time / 60)
        if hours > 0:
            return await message.answer(
                "–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã!\n–î–æ —Ä–∞–∑–±–∞–Ω–∞: " + str(hours)+ " —á–∞—Å–æ–≤")
        if minutes > 0:
            return await message.answer(
                "–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã!\n–î–æ —Ä–∞–∑–±–∞–Ω–∞: " + str(minutes)+ " –º–∏–Ω—É—Ç")
        return await message.answer(
            "–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã!\n–î–æ —Ä–∞–∑–±–∞–Ω–∞: " + str(ban_time)+ " —Å–µ–∫—É–Ω–¥")
    await message.answer(
        emoji.emojize(":high_voltage:"),
        reply_markup=user_btns)

# my id 1573373745
